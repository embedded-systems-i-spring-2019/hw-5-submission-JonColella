--Jonathan Colella | jc2004
--Embedded Systems Homework 5
--Due 3/7/2019

--2)

library IEEE;
use IEEE.std_logic_1164.all;

entity h5p2 is
	port(A_1, A_2, B_1, B_2, D_1 : in std_logic;
	     E_out : out std_logic);

end h5p2;

architecture casetype of h5p2 is
signal bundle_inputs <= A_1 & A_2 & B_1 & B_2 & D_1; --group of signals for the case statement
begin
	main: process(bundle_inputs)
	begin
		case bundle_inputs is
		when "00001" => E-out <= '0';
		when "01001" => E-out <= '0';
		when "10001" => E-out <= '0';
		when "11001" => E-out <= '0';
		when others  => E-out <= '1';
		end case;
	end process main;
end casetype;

architecture iftype of h5p2 is
signal bundle_inputs <= A_1 & A_2 & B_1 & B_2 & D_1; --group of signals for the case statement
begin
	main: process(bundle_inputs)
	begin
		if    (bundle_inputs = "00001") then E-out <= '0';
		elsif (bundle_inputs = "01001") then E-out <= '0';
		elsif (bundle_inputs = "10001") then E-out <= '0';
		elsif (bundle_inputs = "11001") then E-out <= '0';
		else  E-out <= '1';
		end if;
	end process main;
end iftype;

--3)

library IEEE;
use IEEE.std_logic_1164.all;

entity h5p3 is
	port(A_1, A_2, B_1, B_2, D_1 : in std_logic;
	     E_out : out std_logic);

end h5p3;

architecture behavioral of h5p3 is
signal a_out, b_out, c_out, d_not : std_logic;
begin
	a_out <= (A_1 AND A_2);
	b_out <= (B_1 OR  B_2);
	c_out <= (B_2 AND d_not);
	d_not <= (NOT D_1);
	E-out <= (a_out OR b_out OR c_out);
	
end behavioral;

--6)

library IEEE;
use IEEE.std_logic_1164.all;

entity h5p6 is
	port(data_in : in std_logic_vector(7 downto 0);
	     select  : in std_logic_vector(2 downto 0);
	     output  : out std_logic);

end h5p6;

architecture casetype of h5p6 is
begin
	main: process(select)
	begin
		case select is
		when "000" => output <= data_in(0);
		when "001" => output <= data_in(1);
		when "010" => output <= data_in(2);
		when "011" => output <= data_in(3);
		when "100" => output <= data_in(4);
		when "101" => output <= data_in(5);
		when "110" => output <= data_in(6);
		when "111" => output <= data_in(7);
		when others => output <= '0';
		end case;
	end process main;
end casetype;

architecture iftype of h5p6 is
begin
	main: process(select)
	begin
		if    (select = "000") then output <= data_in(0);
		elsif (select = "001") then output <= data_in(1);
		elsif (select = "010") then output <= data_in(2);
		elsif (select = "011") then output <= data_in(3);
		elsif (select = "100") then output <= data_in(4);
		elsif (select = "101") then output <= data_in(5);
		elsif (select = "110") then output <= data_in(6);
		elsif (select = "111") then output <= data_in(7);
		else  output <= '0';
		end if;
	end process main;
end iftype;

--7)

library IEEE;
use IEEE.std_logic_1164.all;

entity h5p7 is
	port(data_in : in std_logic_vector(2 downto 0);
	     output  : out std_logic_vector(7 downto 0));

end h5p7;

architecture casetype of h5p7 is
begin
	main: process(data_in)
	begin
		case data_in is
		when "000" => output(0) <= '1';
		when "001" => output(1) <= '1';
		when "010" => output(2) <= '1';
		when "011" => output(3) <= '1';
		when "100" => output(4) <= '1';
		when "101" => output(5) <= '1';
		when "110" => output(6) <= '1';
		when "111" => output(7) <= '1';
		when others => output <= '0';
		end case;
	end process main;
end casetype;

architecture iftype of h5p7 is
begin
	main: process(data_in)
	begin
		if    (data_in = "000") then output(0) <= '1';
		elsif (data_in = "001") then output(1) <= '1';
		elsif (data_in = "010") then output(2) <= '1';
		elsif (data_in = "011") then output(3) <= '1';
		elsif (data_in = "100") then output(4) <= '1';
		elsif (data_in = "101") then output(5) <= '1';
		elsif (data_in = "110") then output(6) <= '1';
		elsif (data_in = "111") then output(7) <= '1';
		else  output <= '0';
		end if;
	end process main;
end iftype;










